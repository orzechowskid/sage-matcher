{"version":3,"sources":["components/Header.module.scss","components/Busy.module.scss","App.module.scss","components/Busy.js","components/Header.js","App.js","serviceWorker.js","index.js","utils/i18n.js"],"names":["module","exports","Busy","className","styles","busy","localize","Header","props","t","header","container","href","banner","alt","src","name","login","Home","React","lazy","Login","Register","Volunteer","routes","App","currentPage","useRoutes","console","log","main","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message","dictionary","enUS","key","FnComp","namespace","displayName","translate","Localized"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,0BAA0B,KAAO,qBAAqB,OAAS,yB,mBCA7HD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,iBAAiB,+B,mBCA7DD,EAAOC,QAAU,CAAC,KAAO,oB,qKCGV,SAASC,OACpB,OACI,yBAAKC,UAAWC,IAAOC,O,2BCsChBC,mBAjCf,SAASC,OAAOC,GAAQ,IAEhBC,EACAD,EADAC,EAGJ,OACI,yBAAKN,UAAWC,IAAOM,QACnB,yBAAKP,UAAWC,IAAOO,WACnB,uBAAGC,KAAK,uBACJ,yBACIT,UAAWC,IAAOS,OAClBC,IAAI,OACJC,IAAI,mDAIZ,kBAAC,IAAD,CACIZ,UAAWC,IAAOY,KAClBJ,KAAK,KAEL,8BACKH,EAAE,UAIX,0BAAMN,UAAWC,IAAOa,OACnBR,EAAE,qB,iBCxBjBS,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAQF,IAAMC,MAAK,kBAAM,gCACzBE,EAAWH,IAAMC,MAAK,kBAAM,sDAC5BG,EAAYJ,IAAMC,MAAK,kBAAM,sDAE7BI,EAAS,CACX,IAAK,WAAChB,GAAD,OAAW,kBAACU,EAASV,IAC1B,SAAU,eAACA,GAAD,OAAW,kBAACa,EAAUb,IAChC,YAAa,kBAACA,GAAD,OAAW,kBAACc,EAAad,IACtC,aAAc,mBAACA,GAAD,OAAW,kBAACe,EAAcf,KA0B7BiB,MAvBf,SAASA,MACL,IAAMC,EAAcC,oBAAUH,GAG9B,OAFAI,QAAQC,IAAR,UACAD,QAAQC,IAAIH,GAER,kBAAC,WAAD,KACI,gCACI,kBAAC,EAAD,OAGJ,0BAAMvB,UAAWC,IAAO0B,MACpB,kBAAC,WAAD,CAAUC,SAAU,kBAAC7B,KAAD,OACfwB,IAIT,oDC7BQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHnB,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,YCzH5BN,I,uzIChBA,oEAQIO,EAAaC,EAMjB,SAAS3C,EAAE4C,GACP,OAAOF,GAAcA,EAAWE,GAGpC,SAAS/C,SAASgD,GACd,IAAMC,EAAYD,EAAOE,aAAeF,EAAOtC,KAE/C,SAASyC,UAAUJ,GACf,OAAO5C,EAAE,GAAD,OAAI8C,EAAJ,YAAiBF,KAClB5C,EAAE4C,IADF,WAEIE,EAFJ,aAEkBF,GAY7B,OATA,SAASK,UAAUlD,GACf,OACI,kBAAC8C,EAAD,iBACQ9C,EADR,CAEIC,EAAGgD,iB","file":"static/js/main.4b7d026c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Header_banner__1LeFo\",\"container\":\"Header_container__1H-1u\",\"name\":\"Header_name__2K-kD\",\"header\":\"Header_header__2XAj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"busy\":\"Busy_busy__ln0S9\",\"busy-animation\":\"Busy_busy-animation__3eK0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__uN9ca\"};","import React from 'react';\n\nimport styles from './Busy.module.scss';\n\nexport default function Busy() {\n    return (\n        <div className={styles.busy} />\n    );\n}\n","import {\n    A\n} from 'hookrouter';\nimport React from 'react';\n\nimport {\n    localize\n} from '../utils/i18n';\n\nimport styles from './Header.module.scss';\n\nfunction Header(props) {\n    const {\n        t\n    } = props;\n\n    return (\n        <div className={styles.header}>\n            <div className={styles.container}>\n                <a href=\"https://sagenyc.org\">\n                    <img\n                        className={styles.banner}\n                        alt=\"SAGE\"\n                        src=\"https://sagenyc.org/images/SAGEbannerNYC4.gif\"\n                    />\n                </a>\n\n                <A\n                    className={styles.name}\n                    href=\"/\"\n                >\n                    <span>\n                        {t(`name`)}\n                    </span>\n                </A>\n\n                <span className={styles.login}>\n                    {t(`admin-login`)}\n                </span>\n            </div>\n        </div>\n    );\n}\n\nexport default localize(Header);\n","import {\n    useRoutes\n} from 'hookrouter';\nimport React, {\n    Fragment,\n    Suspense\n} from 'react';\n\nimport Busy from './components/Busy';\nimport Header from './components/Header';\n\nimport styles from './App.module.scss';\n\nconst Home = React.lazy(() => import('./pages/Home'));\nconst Login = React.lazy(() => import('./pages/Login'));\nconst Register = React.lazy(() => import('./pages/Register'));\nconst Volunteer = React.lazy(() => import('./pages/Volunteer'));\n\nconst routes = {\n    '/': (props) => <Home {...props} />,\n    '/login': (props) => <Login {...props} />,\n    '/register': (props) => <Register {...props} />,\n    '/volunteer': (props) => <Volunteer {...props} />\n};\n\nfunction App() {\n    const currentPage = useRoutes(routes);\n    console.log(`hello!`);\n    console.log(currentPage);\n    return (\n        <Fragment>\n            <header>\n                <Header />\n            </header>\n\n            <main className={styles.main}>\n                <Suspense fallback={<Busy />}>\n                    {currentPage}\n                </Suspense>\n            </main>\n\n            <footer>\n                &copy; 2020 SAGE\n            </footer>\n        </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport enUS from '../translations/en-US.json';\n\nconst dictionaries = {\n    'en-US': enUS\n};\n\nlet dictionary = enUS;\n\nfunction setDictionary(key) {\n    dictionary = dictionaries[key] || dictionary;\n}\n\nfunction t(key) {\n    return dictionary && dictionary[key];\n}\n\nfunction localize(FnComp) {\n    const namespace = FnComp.displayName || FnComp.name;\n\n    function translate(key) {\n        return t(`${namespace}:${key}`)\n            || t(key)\n            || `[${namespace}:]${key}`;\n    }\n\n    function Localized(props) {\n        return (\n            <FnComp\n                {...props}\n                t={translate}\n            />\n        );\n    }\n\n    return Localized;\n}\n\nexport {\n    localize,\n    setDictionary,\n    t\n};\n"],"sourceRoot":""}